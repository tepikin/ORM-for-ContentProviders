<?xml version="1.0" encoding="UTF-8"?>
<project name="enterra_commons">

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

	<!-- The local.properties file is created and updated by the 'android' tool. 
		It contains the path to the SDK. It should *NOT* be checked into Version 
		Control Systems. -->

	<property file="local.properties" />

	<!-- The ant.properties file can be created by you. It is only edited by 
		the 'android' tool to add properties to it. This is the place to change some 
		Ant specific build properties. Here are some properties you may want to change/update: 
		source.dir The name of the source directory. Default is 'src'. out.dir The 
		name of the output directory. Default is 'bin'. For other overridable properties, 
		look at the beginning of the rules files in the SDK, at tools/ant/build.xml 
		Properties related to the SDK location or the project target should be updated 
		using the 'android' tool with the 'update' action. This file is an integral 
		part of the build system for your application and should be checked into 
		Version Control Systems. -->

	<property file="ant.properties" />

	<!-- The project.properties file is created and updated by the 'android' 
		tool, as well as ADT. This contains project specific properties such as project 
		target, and library dependencies. Lower level build properties are stored 
		in ant.properties (or in .classpath for Eclipse projects). This file is an 
		integral part of the build system for your application and should be checked 
		into Version Control Systems. -->

	<loadproperties srcFile="project.properties" />

	<!-- quick check on sdk.dir -->

	<fail
		message="sdk.dir is missing. Make sure to generate local.properties using &apos;android update project&apos; or to inject it through an env var"
		unless="sdk.dir" />

	<!-- extension targets. Uncomment the ones where you want to do custom work 
		in between standard targets -->
	<!-- <target name="-pre-build"> </target> <target name="-pre-compile"> </target> 
		/* This is typically used for code obfuscation. Compiled code location: ${out.classes.absolute.dir} 
		If this is not done in place, override ${out.dex.input.absolute.dir} */ <target 
		name="-post-compile"> </target> -->


	<!-- Import the actual build file. To customize existing targets, there 
		are two options: - Customize only one target: - copy/paste the target into 
		this file, *before* the <import> task. - customize it to your needs. - Customize 
		the whole content of build.xml - copy/paste the content of the rules files 
		(minus the top node) into this file, replacing the <import> task. - customize 
		to your needs. *********************** ****** IMPORTANT ****** *********************** 
		In all cases you must update the value of version-tag below to read 'custom' 
		instead of an integer, in order to avoid having your file be overridden by 
		tools such as "android update project" -->


	<!-- version-tag: 2 -->


	<!-- Findbugs Task Start -->

	<property name="src-dir" value="src" />

	<property name="bin-dir" value="bin\classes" />

	<property name="android-jar" value="${sdk.dir}\platforms\${target}\android.jar" />

	<property name="findbugs-report" value="reports/findbugs_report.xml" />

	<path id="findbugs.dir.jars">

		<fileset dir="${findbugs.home}/lib">

			<include name="*.jar" />
		</fileset>
	</path>

	<path id="build.class.path">

		<fileset dir="libs">

			<include name="**/*.jar" />
		</fileset>

		<pathelement location="${android-jar}" />
		<pathelement location="${sdk.dir}\tools\support\annotations.jar" />
		<pathelement location="${bin-dir}" />
	</path>

	<pathconvert pathsep=":" property="mf.classpath">

		<path refid="build.class.path" />

		<map from="c:" to="" />
	</pathconvert>

	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		description="classes+findbugs=magic" />

	<target name="findbugs">

		<mkdir dir="reports" />

		<echo>${findbugs.home}</echo>

		<echo>${android-jar}</echo>

		<echo>${mf.classpath}</echo>

		<findbugs excludeFilter="findbugs_settings.xml" home="${findbugs.home}"
			 output="xml" outputFile="${findbugs-report}">

			<sourcePath path="${src-dir}" />

			<class location="${bin-dir}" />

			<auxClasspath path="${mf.classpath}" />
		</findbugs>
	</target>
	<!-- Findbugs Task Finish -->
	<!-- Checkstyle Task Start -->

	<property name="checkstyle-report" value="reports/checkstyle_report.xml" />

	<path id="compile.class.pathtest">

		<fileset dir="${checkstyle.home}">

			<include name="*.jar" />
		</fileset>
	</path>

	<target name="checkstyle">

		<mkdir dir="reports" />

		<taskdef resource="checkstyletask.properties">

			<classpath refid="compile.class.pathtest" />
		</taskdef>

		<checkstyle config="enterra_checkstyle.xml"
			failOnViolation="false">

			<fileset dir="src">

				<include name="**/*.java" />
			</fileset>

			<formatter type="plain" />

			<formatter toFile="${checkstyle-report}" type="xml" />
		</checkstyle>
	</target>
	<!-- Checkstyle Task finish -->
	<!-- PMD Task Start -->

	<property name="pmd-report" value="reports/pmd_report.xml" />

	<path id="pmd.classpath">

		<fileset dir="${pmd.home}/lib">

			<include name="*.jar" />
		</fileset>
	</path>

	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
		classpathref="pmd.classpath" />

	<path id="pmd.build.class.path">

		<fileset dir="libs">

			<include name="**/*.jar" />
		</fileset>

		<pathelement location="${android-jar}" />
	</path>

	<pathconvert pathsep=":" property="pmd.classpath">

		<path refid="pmd.build.class.path" />

		<map from="c:" to="" />
	</pathconvert>

	<target name="pmd">

		<mkdir dir="reports" />

		<pmd>

			<ruleset>enterra_pmd.xml</ruleset>

			<formatter toFile="${pmd-report}" type="xml" />

			<fileset dir="src">

				<include name="**/*.java" />
			</fileset>

			<auxClasspath path="${pmd.classpath}" />
		</pmd>
	</target>
	<!-- PMD Task Finish -->
	<!-- Lint Task Started -->

	<target name="lint">

		<echo>Running Lint tests ...</echo>

		<echo>
			${user.dir}
		</echo>

		<mkdir dir="reports" />

		<exec executable="${sdk.dir}/tools/lint.bat" failonerror="true">

			<arg line="&apos;${user.dir}&apos;" />

			<arg line="> reports/lint_report.txt" />
		</exec>
	</target>
	<!-- Lint Task Finish -->

	<import file="${sdk.dir}/tools/ant/build.xml" />

</project>